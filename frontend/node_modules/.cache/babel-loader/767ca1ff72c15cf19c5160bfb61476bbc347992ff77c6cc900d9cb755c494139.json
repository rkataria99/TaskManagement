{"ast":null,"code":"import axios from'axios';// Use environment variable for the API base URL\nconst api=axios.create({baseURL:process.env.REACT_APP_API_URL||'http://localhost:5000'// Fallback to localhost if no environment variable is set\n});// Fetch Ethereum balance\nexport const getEthereumBalance=async address=>{try{const response=await api.get(\"/api/web3/balance/\".concat(address));return response.data;// { address, balance }\n}catch(error){var _error$response,_error$response$data;console.error('Error fetching Ethereum balance:',error);throw new Error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||'Failed to fetch balance');}};// Send Ethereum transaction\nexport const sendEthereumTransaction=async transactionDetails=>{try{const response=await api.post('/api/web3/send',transactionDetails);return response.data;// { success: true, receipt }\n}catch(error){var _error$response2,_error$response2$data;console.error('Error sending Ethereum transaction:',error);throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||'Failed to send Ethereum');}};export default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","getEthereumBalance","address","response","get","concat","data","error","_error$response","_error$response$data","console","Error","sendEthereumTransaction","transactionDetails","post","_error$response2","_error$response2$data"],"sources":["D:/TaskManagementSystem/TaskManagementSystem/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Use environment variable for the API base URL\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000', // Fallback to localhost if no environment variable is set\r\n});\r\n\r\n// Fetch Ethereum balance\r\nexport const getEthereumBalance = async (address) => {\r\n  try {\r\n    const response = await api.get(`/api/web3/balance/${address}`);\r\n    return response.data; // { address, balance }\r\n  } catch (error) {\r\n    console.error('Error fetching Ethereum balance:', error);\r\n    throw new Error(error.response?.data?.error || 'Failed to fetch balance');\r\n  }\r\n};\r\n\r\n// Send Ethereum transaction\r\nexport const sendEthereumTransaction = async (transactionDetails) => {\r\n  try {\r\n    const response = await api.post('/api/web3/send', transactionDetails);\r\n    return response.data; // { success: true, receipt }\r\n  } catch (error) {\r\n    console.error('Error sending Ethereum transaction:', error);\r\n    throw new Error(error.response?.data?.error || 'Failed to send Ethereum');\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,KAAM,CAAAC,GAAG,CAAGD,KAAK,CAACE,MAAM,CAAC,CACvBC,OAAO,CAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,uBAAyB;AACrE,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAAC,kBAAkB,CAAG,KAAO,CAAAC,OAAO,EAAK,CACnD,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAR,GAAG,CAACS,GAAG,sBAAAC,MAAA,CAAsBH,OAAO,CAAE,CAAC,CAC9D,MAAO,CAAAC,QAAQ,CAACG,IAAI,CAAE;AACxB,CAAE,MAAOC,KAAK,CAAE,KAAAC,eAAA,CAAAC,oBAAA,CACdC,OAAO,CAACH,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD,KAAM,IAAI,CAAAI,KAAK,CAAC,EAAAH,eAAA,CAAAD,KAAK,CAACJ,QAAQ,UAAAK,eAAA,kBAAAC,oBAAA,CAAdD,eAAA,CAAgBF,IAAI,UAAAG,oBAAA,iBAApBA,oBAAA,CAAsBF,KAAK,GAAI,yBAAyB,CAAC,CAC3E,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAK,uBAAuB,CAAG,KAAO,CAAAC,kBAAkB,EAAK,CACnE,GAAI,CACF,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAR,GAAG,CAACmB,IAAI,CAAC,gBAAgB,CAAED,kBAAkB,CAAC,CACrE,MAAO,CAAAV,QAAQ,CAACG,IAAI,CAAE;AACxB,CAAE,MAAOC,KAAK,CAAE,KAAAQ,gBAAA,CAAAC,qBAAA,CACdN,OAAO,CAACH,KAAK,CAAC,qCAAqC,CAAEA,KAAK,CAAC,CAC3D,KAAM,IAAI,CAAAI,KAAK,CAAC,EAAAI,gBAAA,CAAAR,KAAK,CAACJ,QAAQ,UAAAY,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgBT,IAAI,UAAAU,qBAAA,iBAApBA,qBAAA,CAAsBT,KAAK,GAAI,yBAAyB,CAAC,CAC3E,CACF,CAAC,CAED,cAAe,CAAAZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
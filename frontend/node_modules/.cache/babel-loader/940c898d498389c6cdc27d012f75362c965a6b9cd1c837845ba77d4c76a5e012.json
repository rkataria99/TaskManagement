{"ast":null,"code":"var _jsxFileName = \"D:\\\\TaskManagementSystem\\\\TaskManagementSystem\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport api from './api'; // Import the Axios API instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks when component mounts or after a task is created\n  const fetchTasks = async () => {\n    try {\n      const response = await api.get('/tasks'); // Endpoint to fetch tasks\n      const sortedTasks = sortTasksByPriority(response.data); // Sort tasks by priority\n      setTasks(sortedTasks); // Set the tasks in state\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  // Handle task creation\n  const handleTaskCreated = newTask => {\n    setTasks(prevTasks => [...prevTasks, newTask]); // Add the newly created task to the list\n  };\n\n  // Sorting function for tasks based on priority\n  const sortTasksByPriority = tasks => {\n    const priorityOrder = ['low', 'medium', 'high']; // Define priority order\n    return tasks.sort((a, b) => priorityOrder.indexOf(a.priority) - priorityOrder.indexOf(b.priority));\n  };\n  useEffect(() => {\n    fetchTasks(); // Fetch tasks when the component mounts\n  }, []); // Empty dependency array to ensure it runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n      onTaskCreated: handleTaskCreated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TaskForm","TaskList","api","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","fetchTasks","response","get","sortedTasks","sortTasksByPriority","data","error","console","handleTaskCreated","newTask","prevTasks","priorityOrder","sort","a","b","indexOf","priority","children","fileName","_jsxFileName","lineNumber","columnNumber","onTaskCreated","_c","$RefreshReg$"],"sources":["D:/TaskManagementSystem/TaskManagementSystem/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport api from './api'; // Import the Axios API instance\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks when component mounts or after a task is created\n  const fetchTasks = async () => {\n    try {\n      const response = await api.get('/tasks'); // Endpoint to fetch tasks\n      const sortedTasks = sortTasksByPriority(response.data); // Sort tasks by priority\n      setTasks(sortedTasks); // Set the tasks in state\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  // Handle task creation\n  const handleTaskCreated = (newTask) => {\n    setTasks((prevTasks) => [...prevTasks, newTask]); // Add the newly created task to the list\n  };\n\n  // Sorting function for tasks based on priority\n  const sortTasksByPriority = (tasks) => {\n    const priorityOrder = ['low', 'medium', 'high']; // Define priority order\n    return tasks.sort((a, b) => priorityOrder.indexOf(a.priority) - priorityOrder.indexOf(b.priority));\n  };\n\n  useEffect(() => {\n    fetchTasks(); // Fetch tasks when the component mounts\n  }, []); // Empty dependency array to ensure it runs only once on mount\n\n  return (\n    <div>\n      <h1>Task Management</h1>\n      <TaskForm onTaskCreated={handleTaskCreated} />\n      <TaskList tasks={tasks} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,GAAG,MAAM,OAAO,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;MAC1C,MAAMC,WAAW,GAAGC,mBAAmB,CAACH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;MACxDN,QAAQ,CAACI,WAAW,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;;EAED;EACA,MAAME,iBAAiB,GAAIC,OAAO,IAAK;IACrCV,QAAQ,CAAEW,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAED,OAAO,CAAC,CAAC,CAAC,CAAC;EACpD,CAAC;;EAED;EACA,MAAML,mBAAmB,GAAIN,KAAK,IAAK;IACrC,MAAMa,aAAa,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;IACjD,OAAOb,KAAK,CAACc,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKH,aAAa,CAACI,OAAO,CAACF,CAAC,CAACG,QAAQ,CAAC,GAAGL,aAAa,CAACI,OAAO,CAACD,CAAC,CAACE,QAAQ,CAAC,CAAC;EACpG,CAAC;EAED1B,SAAS,CAAC,MAAM;IACdU,UAAU,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxB1B,OAAA,CAACJ,QAAQ;MAAC+B,aAAa,EAAEd;IAAkB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9C1B,OAAA,CAACH,QAAQ;MAACM,KAAK,EAAEA;IAAM;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;AAEV;AAACxB,EAAA,CApCQD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AAsCZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
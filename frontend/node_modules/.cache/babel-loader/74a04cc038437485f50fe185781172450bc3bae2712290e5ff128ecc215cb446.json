{"ast":null,"code":"import axios from 'axios';\n\n// Use environment variable for the API base URL\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000' // Fallback to localhost if no environment variable is set\n});\n\n// Fetch Ethereum balance\nexport const getEthereumBalance = async address => {\n  try {\n    const response = await api.get(`/api/web3/balance/${address}`);\n    return response.data; // { address, balance }\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Error fetching Ethereum balance:', error);\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to fetch balance');\n  }\n};\n\n// Send Ethereum transaction\nexport const sendEthereumTransaction = async transactionDetails => {\n  try {\n    const response = await api.post('/api/web3/send', transactionDetails);\n    return response.data; // { success: true, receipt }\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    console.error('Error sending Ethereum transaction:', error);\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to send Ethereum');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","getEthereumBalance","address","response","get","data","error","_error$response","_error$response$data","console","Error","sendEthereumTransaction","transactionDetails","post","_error$response2","_error$response2$data"],"sources":["D:/TaskManagementSystem/TaskManagementSystem/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Use environment variable for the API base URL\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000', // Fallback to localhost if no environment variable is set\r\n});\r\n\r\n// Fetch Ethereum balance\r\nexport const getEthereumBalance = async (address) => {\r\n  try {\r\n    const response = await api.get(`/api/web3/balance/${address}`);\r\n    return response.data; // { address, balance }\r\n  } catch (error) {\r\n    console.error('Error fetching Ethereum balance:', error);\r\n    throw new Error(error.response?.data?.error || 'Failed to fetch balance');\r\n  }\r\n};\r\n\r\n// Send Ethereum transaction\r\nexport const sendEthereumTransaction = async (transactionDetails) => {\r\n  try {\r\n    const response = await api.post('/api/web3/send', transactionDetails);\r\n    return response.data; // { success: true, receipt }\r\n  } catch (error) {\r\n    console.error('Error sending Ethereum transaction:', error);\r\n    throw new Error(error.response?.data?.error || 'Failed to send Ethereum');\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB,CAAE;AACrE,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,OAAO,IAAK;EACnD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,qBAAqBF,OAAO,EAAE,CAAC;IAC9D,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACdC,OAAO,CAACH,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAM,IAAII,KAAK,CAAC,EAAAH,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBF,KAAK,KAAI,yBAAyB,CAAC;EAC3E;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,uBAAuB,GAAG,MAAOC,kBAAkB,IAAK;EACnE,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMR,GAAG,CAACkB,IAAI,CAAC,gBAAgB,EAAED,kBAAkB,CAAC;IACrE,OAAOT,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAQ,gBAAA,EAAAC,qBAAA;IACdN,OAAO,CAACH,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,MAAM,IAAII,KAAK,CAAC,EAAAI,gBAAA,GAAAR,KAAK,CAACH,QAAQ,cAAAW,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBT,IAAI,cAAAU,qBAAA,uBAApBA,qBAAA,CAAsBT,KAAK,KAAI,yBAAyB,CAAC;EAC3E;AACF,CAAC;AAED,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}